{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","Login.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","console","log","set","toString","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","Login","type","placeholder","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e374b1a.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n/* base url fro the requests*/\r\nconst instance = axios.create({\r\n\r\n   baseURL : \"https://api.themoviedb.org/3\",\r\n\r\n});\r\n\r\nexport default instance;","import React, {useState , useEffect}from 'react';\r\nimport axios from './axios';\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\n\r\nconst base_url = 'https://image.tmdb.org/t/p/original/';\r\n\r\nfunction Row({ title, fetchUrl ,isLargeRow}) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n    \r\n    useEffect(()=> {\r\n        // if [] , run once when the row loads, and dont run it again\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n\r\n        }\r\n        fetchData();\r\n\r\n\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        },\r\n      };\r\n\r\n      const handleClick = (movie) => {\r\n          if (trailerUrl){\r\n            setTrailerUrl(\"\");\r\n          }\r\n          else{\r\n              movieTrailer(movie?.name || \"\")\r\n              .then((url) =>{\r\n                let urlParams = new URLSearchParams(new URL(url).search);\r\n                console.log(urlParams);\r\n                urlParams.set('api_key', 'd52e0431788e3e1fb9bfef780e147211');\r\n                urlParams.toString();\r\n                setTrailerUrl(urlParams.get('v'));\r\n              })\r\n              .catch((error) =>console.log(error));\r\n          }\r\n        };\r\n\r\n    return (\r\n        <div className =\"row\">\r\n            <h2>{ title }</h2>\r\n\r\n            <div className=\"row__posters\">\r\n\r\n            {movies.map(movie => (\r\n                <img \r\n                key = {movie.id}\r\n                onClick={() => handleClick(movie)}\r\n                className = {`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                src= {`${ base_url}${isLargeRow?movie.poster_path : movie.backdrop_path}`} alt = {movie.name}/>\r\n                \r\n            \r\n            ))}\r\n\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts = {opts}/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"d52e0431788e3e1fb9bfef780e147211\";\r\n\r\nconst requests = {\r\n    fetchTrending : '/trending/all/week?api_key=d52e0431788e3e1fb9bfef780e147211&language=en-US',\r\n    fetchNetflixOriginals : '/discover/tv?api_key=d52e0431788e3e1fb9bfef780e147211&with_networks=213',\r\n    fetchTopRated : '/movie/top_rated?api_key=d52e0431788e3e1fb9bfef780e147211&language=en-US',\r\n    fetchActionMovies: '/discover/movie?api_key=d52e0431788e3e1fb9bfef780e147211&with_genres=28',\r\n    fetchComedyMovies: '/discover/movie?api_key=d52e0431788e3e1fb9bfef780e147211&with_genres=35',\r\n    fetchHorrorMovies: '/discover/movie?api_key=d52e0431788e3e1fb9bfef780e147211&with_genres=27',\r\n    fetchRomanceMovies: '/discover/movie?api_key=d52e0431788e3e1fb9bfef780e147211&with_genres=10749',\r\n    fetchDocumentaries: '/discover/movie?api_key=d52e0431788e3e1fb9bfef780e147211&with_genres=99',\r\n\r\n}\r\n\r\nexport default requests;","import React, {useState, useEffect} from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport \"./Banner.css\";\r\n\r\n\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie]= useState([]);\r\n\r\n    useEffect(() => {\r\n       async function fetchData(){\r\n           const request = await axios.get(requests.fetchNetflixOriginals);\r\n           setMovie(\r\n               request.data.results[\r\n               Math.floor(Math.random() * request.data.results.length-1)\r\n               ]\r\n\r\n           );\r\n           return request; \r\n\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    function truncate(str,n){\r\n        return str?.length > n ?str.substr(0,n-1) + \"...\":str;\r\n    }\r\n    \r\n    \r\n    return (\r\n        <header className=\"banner\"\r\n        style={{\r\n            backgroundSize : \"cover\",\r\n            backgroundImage : ` url(\r\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                )`,\r\n            backgroundPosition : \"center center\",\r\n        }}\r\n        >  {/* background image*/}\r\n            <div className=\"banner__contents\">\r\n              {/* title */}\r\n\r\n                <h1 className=\"banner__title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n            {/* button*/}\r\n                <div className = \"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n\r\n                </div>\r\n\r\n            {/* description*/}\r\n                <h1 className=\"banner__description\"> {movie?.overview} \r\n                {truncate(movie?.overview, 50)}\r\n                </h1>\r\n\r\n            </div>\r\n            <div className= \"banner--fadeBottom\"></div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Banner;\r\n","import React, {useState, useEffect} from 'react';\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n\r\n    const [show, handleShow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () =>{\r\n            if (window.scrollY > 100){\r\n                handleShow(true);\r\n\r\n            }else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n\r\n        };\r\n }, [])\r\n    \r\n\r\n    return (\r\n        <div className = {`nav ${show && \"nav__black\"}`}>\r\n            <img className = \"nav__avatar\"\r\n            src=\"https://img01.products.bt.co.uk/content/dam/bt/portal/images/logos/tv/Netflix_Logo_Final.png\"\r\n            alt=\"Netflix-logo\"\r\n            />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","//https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSFenpTLO4IEP0uIjif7nK4-Z0a71KgdjdYrw&usqp=CAU\r\n//background-image\r\n\r\nimport React from 'react';\r\nimport './Login.css';\r\n\r\nfunction Login() {\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__image\">\r\n            <img src=\"https://i.imgur.com/WN8YaEH.png\" alt=\"banner\" className=\"log__img\"/>\r\n            </div>\r\n            <div className=\"login__log\">\r\n                <label className=\"inp__field\">\r\n                    Email\r\n                </label>\r\n                <input className=\"inp__field\" type=\"text\" placeholder=\"gmail\">\r\n                </input><br/>\r\n                <label className=\"inp__field1\">\r\n                    password\r\n                </label>\r\n                <input className=\"inp__field1\" type=\"password\" placeholder=\"\">\r\n                </input>\r\n                <img className = \"nav__logo\"\r\n            src=\"https://assets.brand.microsites.netflix.io/assets/1ed15bca-b389-11e7-9274-06c476b5c346_cm_800w.png?v=24\"\r\n            alt=\"Netflix-logo\"\r\n            />\r\n            </div>\r\n           \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\nimport Login from './Login';\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom'\n\nfunction App() {\n  return (\n   \n      <Router>\n        <Switch>\n          <Route path=\"/login\">\n            <Login/>\n            </Route>\n          <Route path=\"/\">\n          <div className=\"app\">\n<Nav/>\n{/* Banner*/}\n<Banner />\n\n<Row title = \"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow/>\n<Row title = \"Trending Now\" fetchUrl={requests.fetchTrending}/>\n<Row title = \"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n<Row title = \"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n<Row title = \"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n<Row title = \"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n<Row title = \"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n<Row title = \"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n\n</div>\n\n          </Route>\n        </Switch>\n      </Router>\n\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}